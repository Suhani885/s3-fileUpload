// This file is auto-generated by @hey-api/openapi-ts

import { type Options, managerLoginDestroy, managerLoginRetrieve, managerLoginCreate } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { ManagerLoginDestroyData, ManagerLoginDestroyResponse, ManagerLoginRetrieveData, ManagerLoginCreateData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export const managerLoginDestroyMutation = (options?: Partial<Options<ManagerLoginDestroyData>>): UseMutationOptions<ManagerLoginDestroyResponse, AxiosError<DefaultError>, Options<ManagerLoginDestroyData>> => {
    const mutationOptions: UseMutationOptions<ManagerLoginDestroyResponse, AxiosError<DefaultError>, Options<ManagerLoginDestroyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await managerLoginDestroy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const managerLoginRetrieveQueryKey = (options?: Options<ManagerLoginRetrieveData>) => createQueryKey('managerLoginRetrieve', options);

export const managerLoginRetrieveOptions = (options?: Options<ManagerLoginRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await managerLoginRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: managerLoginRetrieveQueryKey(options)
    });
};

export const managerLoginCreateQueryKey = (options: Options<ManagerLoginCreateData>) => createQueryKey('managerLoginCreate', options);

export const managerLoginCreateOptions = (options: Options<ManagerLoginCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await managerLoginCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: managerLoginCreateQueryKey(options)
    });
};

export const managerLoginCreateMutation = (options?: Partial<Options<ManagerLoginCreateData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ManagerLoginCreateData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ManagerLoginCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await managerLoginCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};